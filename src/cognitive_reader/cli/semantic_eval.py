"""CLI command for semantic evaluation of cognitive reading results."""

from __future__ import annotations

from pathlib import Path

import click

from ..evaluation.semantic_evaluator import SemanticEvaluator


@click.command()
@click.argument("json_file", type=click.Path(exists=True, path_type=Path))
@click.option(
    "--detailed", "-d", is_flag=True, help="Show detailed test results for each test"
)
@click.option(
    "--export",
    "-e",
    type=click.Path(path_type=Path),
    help="Export evaluation report to JSON file",
)
@click.option(
    "--verbose",
    "-v",
    is_flag=True,
    help="Show verbose output during evaluation process",
)
def semantic_eval(
    json_file: Path,
    detailed: bool,
    export: Path | None,
    verbose: bool,
) -> int:
    """Evaluate semantic quality of cognitive reading results.

    This tool runs a comprehensive set of semantic tests against the JSON
    output generated by the cognitive reader to assess how well the system
    understood and summarized the document content.

    The evaluation covers:
    - Conceptual integrity (redefined terms)
    - Metaphor fidelity (key analogies)
    - Causal relationships (cause-effect understanding)
    - Nuance and ambiguity (complex concepts)

    JSON_FILE: Path to the JSON output from cognitive-reader processing.

    Example:
        cognitive-reader-eval output.json --detailed --export evaluation.json
    """
    try:
        evaluator = SemanticEvaluator()

        # Run evaluation
        if verbose:
            click.echo("üß† Starting semantic evaluation...")

        report = evaluator.evaluate_document(json_file, verbose=verbose)

        # Display results
        evaluator.print_report(report, detailed=detailed)

        # Export if requested
        if export:
            evaluator.export_report(report, export)
            click.echo(f"\nüìÑ Evaluation report exported to: {export}")

        # Exit code based on quality
        if report.overall_score >= 0.7:
            click.echo("\nüéâ High quality cognitive understanding achieved!")
            exit_code = 0
        elif report.overall_score >= 0.5:
            click.echo("\n‚ö†Ô∏è  Moderate quality - some improvements needed.")
            exit_code = 1
        else:
            click.echo("\n‚ùå Low quality - significant issues detected.")
            exit_code = 2

        # Summary for CI/automation
        if not verbose:
            click.echo(
                f"Overall Score: {report.overall_score:.2f} ({report.quality_grade})"
            )
            click.echo(
                f"Pass Rate: {report.pass_rate:.1%} ({report.passed_tests + report.partial_tests}/{report.total_tests})"
            )

        return exit_code

    except FileNotFoundError as e:
        click.echo(f"‚ùå Error: {e}", err=True)
        return 3
    except Exception as e:
        click.echo(f"‚ùå Evaluation failed: {e}", err=True)
        if verbose:
            import traceback

            traceback.print_exc()
        return 4


if __name__ == "__main__":
    semantic_eval()
